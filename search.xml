<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[致自己]]></title>
    <url>%2F%2F2019%2F07%2F22%2F%E8%87%B4%E8%87%AA%E5%B7%B1%2F</url>
    <content type="text"><![CDATA[​ 水星记： ​ 这些天晚上在看谷川俊太郎的《一个人生活》，感触很多。谷川俊太郎是日本著名的诗人和散文家，这本书是他在年近古稀之时写的一个散文集，写的朴实随意，却又不失有趣。 ​ 其中《翘望春天的书信》篇中引用的永赖清子的的一首诗给了我极其深刻的印象： 一直在原野之上 因我一直急于求成 致使其他毫无建树 我为了什么而如此地心急火燎呢？ 思虑再三&nbsp;&nbsp;&nbsp;&nbsp;我只是急着规划自己成长的脚步 ——明明那脚步永不会停歇—— 而且，明明只会让我舍弃很多很多的美好——​ 那么我急于求成了吗？大概是有的吧，俩三月内要看完很多书，还有很多视频要看，因此顾此失彼，荒了很多其他自己曾经立志要坚持的东西，可是还能怎么办呢，马上要开始秋招了，那些东西是找到一个好的实习所必备的知识。同学们都打算考研，在努力备战。比起有人说考研是一个人的修行，现在来说却是用在我身上更为合适。凯歌不在这已经好几天了，从早到晚都是一个人，果然一个人的生活。 ​ 说起来这两天学习有点松懈，总是不想学习，内心给了自己一个寻找自我的借口不断放纵，安逸是毁灭的前兆，坚持努力吧，趁自己还有充裕的时间，趁自己还没有被其他琐事所烦扰，仔细一想，这不就是我租房的意义所在？如果不想开学后一无所获，不想承受家里的压力，自己给姐姐和父母许下的承诺，Keep fighting。开学后就要写实训课的设计了，开学前还要花点时间想想写啥以及如何写的问题，自己还想想在项目里用上框架啥的，不知是否现实（目测应该可以），等等，我突然有个大胆的想法，要是把我的个人博客写成一个设计岂不两全其美（窃喜），哈哈哈哈。 用户访问网站要先要求登录或注册，之后用其用户id实例化一个hexo项目文件夹； 利用java更改其配置文件（直接copy效果更好）； 用户写博客的话可以直接上传Markdown文件，然后服务器加载其文件，重新生成相应文件 增加点赞和取消点赞功能 增加评论和删除评论功能 增加搜索文章（仅限标题）功能 可达鸭眉头一挑，发现问题确实不难:smile:]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[一些小细节]]></title>
    <url>%2F%2F2019%2F07%2F21%2F%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%BB%86%E8%8A%82%2F</url>
    <content type="text"><![CDATA[导入jar包时看清哪些类在哪些包下，可以参考一下API（入伏能找到的话），确认这个类不在所有可运行的包下之后再去网上找jar包]]></content>
      <categories>
        <category>踩坑实录</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Markdown编辑器Typora]]></title>
    <url>%2F%2F2019%2F07%2F21%2FMarkdown%E7%BC%96%E8%BE%91%E5%99%A8Typora%2F</url>
    <content type="text"><![CDATA[Typora快捷键目录 windows快捷键： 给代码块设置快捷键: Mac中的快捷键： 图片： 表情 数学公式 HTML 行内嵌数学符号 下标 高亮 参考： windows快捷键：# 无序列表：输入-之后输入空格 有序列表：输入数字+“.”之后输入空格 任务列表：-[空格]空格 文字 标题：ctrl+数字 表格：ctrl+t 生成目录：[TOC]按回车 选中一整行：ctrl+l 选中单词：ctrl+d 选中相同格式的文字：ctrl+e 跳转到文章开头：ctrl+home 跳转到文章结尾：ctrl+end 搜索：ctrl+f 替换：ctrl+h 引用：输入&gt;之后输入空格 代码块：ctrl+alt+f 加粗：ctrl+b 倾斜：ctrl+i 下划线：ctrl+u 删除线：alt+shift+5 插入图片：直接拖动到指定位置即可或者ctrl+shift+i 插入链接：ctrl + k 给代码块设置快捷键:#偏好设置-&gt;打开高级设置-&gt;conf.user.json文件 12345678"keyBinding": &#123; // for example: // "Always on Top": "Ctrl+Shift+P" "Always on Top": "Ctrl+Shift+P", "Code Fences": "Ctrl+Shift+F", "Ordered List":"Ctrl+Alt+o", "Unordered List": "Ctrl+Alt+u" &#125;, Code Fences 代码块 Ordered List 数字有序列表 Unordered List 无序列表 转自：hongda]]></content>
      <categories>
        <category>其他软件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[html的常用标签]]></title>
    <url>%2F%2F2019%2F07%2F21%2Fhtml%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"><![CDATA[在html中插入音频]]></content>
      <categories>
        <category>前端</category>
        <category>html</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[xml(一)]]></title>
    <url>%2F%2F2019%2F07%2F21%2Fxml-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[xml概述xml标准文档的极佳版本 xml是一种能表示层次结构的标记语言，比属性文件的平面表结构更灵活，它与html较为类似 区别如下： 1.xml是大小写敏感的，如， 1&lt;H1&gt; 和 1&lt;h1&gt; 是不同的xml标签 2.在xml中，只有一个标签而无相应的尾标签的元素必须以/结尾，比如 1&lt;img src="" /&gt; ，这样，解析器就不必查找 1&lt;/img&gt; 标签了。 3.在xml中，属性值必须用引号括起来，在html中，引号是可有可无的，如 1&lt;applet code="" width=300 height=400&gt; 对html来说是合法的，但对xml来说不合法。 4.在html中属性可以没有值，如， 1&lt;input type="radio" name="hhh" value="hhh" checked&gt; ，在xml中所有属性都必须有值。 xml文档的结构 xml应当以一个文档头开始，如： 1&lt;?xml version="1.0" encoding="UTF-8"?&gt; 文档头之后通常是文档类型定义，如: 1&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DAD Web Application 2.2//EN" "http://java.sun.com/j2ee/dtds/web-app_2_2.dtd"&gt; 最后xml文档的正文包含根元素，根元素包含一些其他的元素。如： 12345678910&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE configuration...&gt;&lt;configuration&gt; &lt;title&gt; &lt;font&gt; &lt;name&gt;Helvetica&lt;/name&gt; &lt;size&gt;36&lt;/size&gt; &lt;/font&gt; &lt;/title&gt;&lt;/configuration&gt; 元素可以有子元素、文本或者两者皆有（在设计xml文档时，最好使元素要么包含子元素，要么包含文本，应该避免以下情况：在xml规范中，这叫做混合式内容，避免了混合式内容可以简化简化解析过程。） 1234&lt;font&gt; Helvetica &lt;size&gt;35&lt;/size&gt;&lt;/font&gt; 属性只应在修改值的解释时使用，而不是指定值时使用。 元素和文档是xml文档的“主要支撑要素”，以下是一些标记说明 字符引用的形式是&amp;#十进制值，或者&amp;#x十六进制值，如字符e可以用下面两种形式表示： &amp;#233； &amp;#xD9； 实体引用的形式是&name;。下面这些实体引用：&amp;lt；&amp;gt；&amp;amp；&amp;quot；&amp;apos；分别表示&lt;，&gt;，&amp;，’，…等字符，可以在DTD中定义其他的实体引用。 CDATA部分用&lt;![CDATA[和]]&gt;来限定其界限。他们是字符数据的一种特殊形式。你可以使用它们来包含那些含有&lt;，&gt;，&amp;之类字符的字符串，而不必将它们解释为标记，例如： 1&lt;![CDATA[&lt; &amp; &gt; are myfavourate delimiters]]&gt; CDATA部分不能包含字符串]]&gt;。使用这一特性时要特别注意。它常用来当做将传统数据偷偷纳入XML文档的一个后门。 处理指令（processing instruction）是那些专门在处理xml文档的应用程序中使用的指令，它们将用&lt;?和?&gt;来限定其界限，例如： 1&lt;?xml-stylesheet href="mystyle.css" type="text/css"?&gt; 每个xml都以下面这个处理指令开头： &lt;?xml version=”1.0” encoding=”utf-8”?&gt; 注释用&lt;!– 和–!&gt;来限定其界限：&lt;!– 这是一个注释 –!&gt; 解析xml文档一、基于文档对象模型（DOM）的树形解析器 DOM解析器对于实现我们的大多数目的来说都很容易，不过用它生成树结构会消耗大量内存。JDK中自己包含的有DOM解析器，我们可以直接拿来用 下面的代码使用了DOM解析器解析了相关的xml文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package domtree;import java.io.File;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.w3c.dom.Text;public class Main &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();//DocumentBuilderFactory实例化 File file=new File("src/web.xml");//classpath下的一个xml文件 try &#123; DocumentBuilder builder=factory.newDocumentBuilder(); Document doc=builder.parse(file);//选择输入源，可以是文件或者是URL: //Document doc=builder.parse(url);或者是一个输入流： //Document doc=builder.parse(inputStream); //如果使用输入流作为输入源，当这个源的初始化对象是那些相对于文档位置定位的文件时 //解析器将无法定位，但是可以通过安装一个“实体分解器（entity resolver）”来解决这个问题 Element root =doc.getDocumentElement();//获得根节点 treeParser("",root);//递归的访问元素节点 //System.out.println("hhhh\thhhh");测试tab &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; public static void treeParser(String tab,Element element)&#123; System.out.println(tab+element.getTagName());//打印元素节点名称 NodeList childrens=element.getChildNodes();//获得元素节点的所有子节点 if(childrens.getLength()&gt;1)&#123;//若元素节点的子节点还有元素节点 for(int i=0;i&lt;childrens.getLength();i++)&#123;//遍历element的所有子节点 Node child=childrens.item(i); if(child instanceof Element)&#123;//若其是元素节点，则递归的访问其子节点 treeParser(tab+"\t",(Element)child); &#125; &#125; &#125;else&#123;//element元素节点下只剩数据，则输出其数据 System.out.print(tab+"\t"); System.out.println( ((Text)element.getFirstChild()) .getData().trim());// &#125; System.out.println(tab+element.getTagName());//再次输出元素节点名称 &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5"&gt; &lt;!-- 配置 org.springframework.web.filter.HiddenHttpMethodFilter: 可以把 POST 请求转为 DELETE 或 POST 请求 --&gt; &lt;filter&gt; &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;!-- 配置 DispatcherServlet --&gt; &lt;servlet&gt; &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- 配置 DispatcherServlet 的一个初始化参数: 配置 SpringMVC 配置文件的位置和名称 --&gt; &lt;!-- 实际上也可以不通过 contextConfigLocation 来配置 SpringMVC 的配置文件, 而使用默认的. 默认的配置文件为: /WEB-INF/&lt;servlet-name&gt;-servlet.xml --&gt; &lt;!-- &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt; &lt;/init-param&gt; --&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 二、基于xml简单API的（SAX）的流机制解析器]]></content>
      <categories>
        <category>java学习笔记</category>
        <category>xml</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[绘制图表软件visio]]></title>
    <url>%2F%2F2019%2F07%2F20%2F%E7%BB%98%E5%88%B6%E5%9B%BE%E8%A1%A8%E8%BD%AF%E4%BB%B6visio%2F</url>
    <content type="text"><![CDATA[visio常用快捷键 复制 按ctrl+拖动 水平/垂直复制 按ctrl+shift+ 拖动（水平/垂直） 水平/垂直移动 按shift+拖动 放大 ctrl+滚轮 键拖动幕布 ctrl+alt+鼠标右 水平滚动画布 shift+滚轮 选择工具 ctrl+1 文字工具 ctrl+2 连接线 ctrl+3 形状工具 ctrl+8 文本（加粗/斜体/删除线） ctrl+b/i/u 字体变大/小 ctrl+shift+,/. 矩形→正方形/椭圆→圆形/直线→水平/垂直或45°线 shift 组合/取消组合 ctrl+g/ctrl+shift+u 字体下标/上标 ctrl+＝/ctrl+shift+＝ 保存 F12Visio 使用小技巧 选中图形，左下角可以调出大小和位置。 取消箭头自动连接 进去visio视图-&gt;视觉帮助 右下角点三角形把当前活动的中的对齐粘附选项全部取消掉。 鼠标按住尺规的边缘往外拉，会拉出一条绘图辅助线，按del键就会消失，而且选中这条线，按ctrl+L会旋转90°。选粘附到参考线。当拖动图形靠近辅助线时，将锁定图形位置。 选择对齐方式时，是以第一个被选中的图形为基准。左对齐：以第一个图形的左边框为基准线对齐；其他类似。 连接线上添加文字——在连接线上双击鼠标左键，即可添加文字。添加完毕后，按住文字中间的黄色菱形，课任意拖放文字的位置。 搜索形状的搜索栏很好用，你可以在里面找到同一类型不同样式的图形。比如搜索‘连接器’，就会出现上百个不同样式的连接器。 转自：https://blog.csdn.net/sinat_20311715/article/details/80858859 去掉绘图背景右击图形， 选择格式，再点里面的填充 选择”图案颜色”的对应的下拉菜单。选择“无”，点击确定，再看，图形形状就变成透明的了， 绘图图片输出步骤如下： https://jingyan.baidu.com/article/48b558e336a8a17f38c09a9e.html 线段点对齐如下所示，鼠标悬浮不动，按上键或下键，可以微调线段的位置]]></content>
      <categories>
        <category>其他软件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java流家族]]></title>
    <url>%2F%2F2019%2F07%2F20%2Fjava%E6%B5%81%E5%AE%B6%E6%97%8F%2F</url>
    <content type="text"><![CDATA[java流家族类及接口继承结构如下： 字节流： 字符流：]]></content>
      <categories>
        <category>java学习笔记</category>
        <category>io</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[DataOutputStream二进制输入输出时存在的问题]]></title>
    <url>%2F%2F2019%2F07%2F20%2FDataOutputStream%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%97%B6%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"></content>
      <categories>
        <category>java学习笔记</category>
        <category>io</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[记一次踩坑记录：hexo配置文件package]]></title>
    <url>%2F%2F2019%2F07%2F19%2F%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%EF%BC%9Ahexo%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6package%2F</url>
    <content type="text"><![CDATA[哎呀花了我大半天时间终于把这个bug给解决了，都是当时我乱改配置文件惹的祸，发誓再也不乱改配置文件了。。。 ​ 之前发现的问题是我的hexo不能正常显示我的Markdown文本内嵌的html标签，到网上好一阵百度，终于证明不是hexo的锅，没错，这锅应该我来背，，这配置文件改的太久了，都过去了好几个月了，早忘了当时自己改了啥了， ​ 记一下解决办法吧，虽然还没意识到问题的本质，解决如下： ​ 重新初始化一个hexo项目文件夹，进行隔离测试（这是个好办法，出现不明原因bug时要记得经常使用），不断地将之前的配置拿到新文件夹中测试，先是对主题测试，证明不是主题配置的问题，之后再对_config.xml文件进行测试，结果没问题，而后在对hexo主目录下的package.json文件内节点进行逐项测试（而我比较懒，就没有逐项），证明是此文件的配置项的问题后，之后将老站点的资源文件及相关有效配置迁移到新站点]]></content>
      <categories>
        <category>前端</category>
        <category>博客框架</category>
      </categories>
      <tags>
        <tag>踩坑实录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[立志做一个勤奋的笔耕者]]></title>
    <url>%2F%2F2019%2F07%2F19%2F%E7%AB%8B%E5%BF%97%E5%81%9A%E4%B8%80%E4%B8%AA%E5%8B%A4%E5%A5%8B%E7%9A%84%E7%AC%94%E8%80%95%E8%80%85%2F</url>
    <content type="text"><![CDATA[​ 花了五六个小时的时间，利用hexo框架总算是把我的个人博客给搭建起来了，实属不易呀，并且完成了在GitHub上的静态发布。 ​ 搭建个人博客对程序员来说是挺重要的一件事，可以在个人博客上写一些个人的学习笔记，知识总结，加深自己对相关知识的理解，还有一些踩坑记录，避免自己再次踩坑:grin:，以后还可以在上面放一些生活随笔。下搭建个人博客决心的过程有点艰难，本来很早的时候就有过搭建个人博客的想法，可是那个时候感觉，写个人博客的都是技术大拿，自己作为一个程序猿小透明，不会也没有必要去写个人博客，感觉写了也没人看，这么长时间经历了蛮多事，同学们大都考研了，自己找实习的过程中又屡遭碰壁，感觉自己的基础知识极度不扎实，有些知识点说明白也明白点，可但往深处一问，就有啥都不会了，更让自己无法接受的是那个说自己基础不扎实的面试官还是自己的同龄。幸而有个学长给自己指明了现阶段的方向，终于决定暑假恶补自己的java的基础知识，外加数据库（mysql）和开发框架（spring全家桶），无奈学习效率不尽如人意，感觉看过教学视频后再在总结为一篇博客效果会好点。 博客更新计划如下： 1.框架部分准备一日多更 2.java部分一日一更 3.其他博文周更 具体步骤参见个人博客的搭建。 ​]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[为你的hexo添加表情]]></title>
    <url>%2F%2F2019%2F07%2F19%2F%E4%B8%BA%E4%BD%A0%E7%9A%84hexo%E6%B7%BB%E5%8A%A0%E8%A1%A8%E6%83%85%2F</url>
    <content type="text"></content>
      <categories>
        <category>前端</category>
        <category>博客框架</category>
      </categories>
      <tags>
        <tag>操作与实战</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客的搭建]]></title>
    <url>%2F%2F2019%2F07%2F19%2F%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[我采用的是hexo博客框架 搭建过程需要一下步骤： 1.安装git 2.安装Nodejs 3.安装hexo（包括以上两项都可以去官网下载，直接安装，没毛病） 4.需要在github上注册一个账号，已有可自动忽略 生成hexo目录及更改hexo的配置文件以上算是搭建完成了，之后需要新建一个文件夹你的git usename（或者其他），cd进入此文件夹，执行： hexo init 会默认在当前文件夹下生成hexo的目录，目录及命令介绍详见hexo文档，详细阅读之后能了解hexo的目录架构，及工作方式，同时更改_config.yml的配置 修改主题在_config.yml配置文件中有个theme字段中可更改主题，next挺好用的，详细配置参见https://www.jianshu.com/p/b75146d016e6及next文档http://theme-next.iissnan.com/getting-started.html]]></content>
      <categories>
        <category>前端</category>
        <category>博客框架</category>
      </categories>
      <tags>
        <tag>操作与实战</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tomcat导入源码]]></title>
    <url>%2F%2F2019%2F07%2F19%2FTomcat%E5%AF%BC%E5%85%A5%E6%BA%90%E7%A0%81%2F</url>
    <content type="text"></content>
      <categories>
        <category>tomcat</category>
      </categories>
      <tags>
        <tag>操作与实战</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java与编码]]></title>
    <url>%2F%2F2019%2F07%2F19%2Fjava%E4%B8%8E%E7%BC%96%E7%A0%81%2F</url>
    <content type="text"><![CDATA[utf-16编码​ 先解释一下utf-16编码： ​ 原文链接：https://blog.csdn.net/wusj3/article/details/88641084 java与utf-16​ 从jdk 5.0开始。代码点是指与一个编码表中的某个字符对应的代码值。在Unicode标准中，代码点采用十六进制书写，并加上前缀U+，例如U+0041就是字母A的代码点。Unicode的代码点可以分为十七个代码级别。第一个代码级别被称为基本的多语言级别，代码点从U+0000到U+FFFF，其中包含了经典的Unicode代码；其余的十六个附加级别代码点从U+10000到U+10FFFF，其中包含了一些辅助字符，辅助字符一般采用一对连续的的代码单元表示 在java中，char类型用UTF-16编码描述一个代码单元]]></content>
      <categories>
        <category>我理解的java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo中next的其他配置]]></title>
    <url>%2F%2F2019%2F07%2F19%2FHexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%98%BE%E7%A4%BA%E6%91%98%E8%A6%81%E5%92%8C%E9%98%85%E8%AF%BB%E5%8E%9F%E6%96%87%E6%8C%89%E9%92%AE%2F</url>
    <content type="text"><![CDATA[1.Hexo博客NexT主题下显示摘要和阅读原文按钮转自https://blog.csdn.net/mqdxiaoxiao/article/details/93263923 2. 我可以设置这一句的颜色哈哈]]></content>
      <categories>
        <category>前端</category>
        <category>博客框架</category>
      </categories>
      <tags>
        <tag>操作与实战</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F%2F2019%2F07%2F19%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
